name: Validate version

on:
  workflow_call:
  
jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      outcome: ${{ env.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if version is in semantic format
        id: version_semantic
        run: |
          pip install semantic_version
          vers=`python3 -c "
          import configparser
          import semantic_version
          read_version = configparser.ConfigParser()
          read_version.read('VERSION.ini')
          version = read_version.get('APP', 'version')
          if semantic_version.validate(version):
            print(version)
          else:
            print('Error: Version not in semantic format')"`
          if [[ $vers == *"Error"* ]]; then
            echo $vers
            exit 1
          fi
          echo "Version - "$vers
          echo "::set-output name=version::$vers"

      - name: Check if version is in ChangeLog file
        run: |
          version=${{ steps.version_semantic.outputs.version }}
          echo "version is: ${version}"
          chgLog=`grep -q "$version" CHANGELOG.md; [ $? -eq 0 ] && echo "Y" || echo "N"`
          if [[ $chgLog == "N" ]]; then
            echo "Error: Version not available in CHANGELOG.md file"
            exit 1
          fi

      - name: Check if git tag already exists
        run: |
          version=${{ steps.version_semantic.outputs.version }}
          echo "version is: ${version}"
          tag=$(git tag -l "$version")
          if [ ! -z "$tag" ]; then
            echo "ERROR: Git tag already exists"
            exit 1
          fi

      - name: Check if tag has the right sequential format
        run: |
          baseline='N'
          if [ ! $(git describe --tags `git rev-list --tags --max-count=1`) &> /dev/null ]; then
            echo "Error: Git tag need to baselined first"
            exit 1
          else
            baseline='Y'
            ver=$(git describe --tags `git rev-list --tags --max-count=1`)
          fi
          version=${{ steps.version_semantic.outputs.version }}
          echo "version is: ${version}"
          if [[ $baseline == 'Y' ]]; then
          t_current_version=`echo ${version}`
          no_sequence=`python3 -c "
          import semantic_version
          v = semantic_version.Version('''$ver''')
          v_major = v.next_major()
          v_minor = v.next_minor()
          v_patch = v.next_patch()
          if('''$t_current_version''' != str(v_major) and '''$t_current_version''' != str(v_minor) and '''$t_current_version''' != str(v_patch)):              
            print('Y')
          else:
            print('N')"`           
          if [[ $no_sequence != "N" ]]; then
            echo "Error: Version not in sequential format"
            exit 1
          fi
          fi

      - name: Set Validate version outcome to success
        run: echo "outcome=success" >> $GITHUB_ENV
